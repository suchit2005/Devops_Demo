{"version":3,"file":"enigma.min.js","sources":["node_modules/node-event-emitter/index.js","src/event-emitter.js","src/session.js","src/cache.js","src/schema.js","src/rpc-resolver.js","src/rpc.js","src/suspend-resume.js","src/interceptors/request/delta.js","src/interceptors/response/api.js","node_modules/extend/index.js","src/json-patch.js","src/interceptors/response/delta.js","src/interceptors/response/out-param.js","src/intercept.js","src/interceptors/response/error.js","src/interceptors/response/result.js","src/api-cache.js","src/qix.js"],"sourcesContent":["/**\n * Utility functions\n */\n\nvar util = {};\n\nutil.isObject = function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nutil.isNumber = function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nutil.isUndefined = function isUndefined(arg) {\n  return arg === void 0;\n}\n\nutil.isFunction = function isFunction(arg){\n  return typeof arg === 'function';\n}\n\n\n/**\n * EventEmitter class\n */\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!util.isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error' && !this._events.error) {\n    er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      throw Error('Uncaught, unspecified \"error\" event.');\n    }\n    return false;\n  }\n\n  handler = this._events[type];\n\n  if (util.isUndefined(handler))\n    return false;\n\n  if (util.isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (util.isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              util.isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (util.isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (util.isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!util.isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n\n      if (util.isFunction(console.error)) {\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n      }\n      if (util.isFunction(console.trace))\n        console.trace();\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (util.isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (util.isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (util.isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (Array.isArray(listeners)) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (util.isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (util.isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n","import EventEmitter from 'node-event-emitter';\n\n/**\n* @module EventEmitter\n* @private\n*/\nexport default {\n\n  /**\n  * Function used to add event handling to objects passed in.\n  * @param {Object} obj Object instance that will get event handling.\n  */\n  mixin: (obj) => {\n    Object.keys(EventEmitter.prototype).forEach((key) => {\n      obj[key] = EventEmitter.prototype[key];\n    });\n    EventEmitter.init(obj);\n  },\n};\n","import EventEmitter from './event-emitter';\n\nconst RPC_CLOSE_NORMAL = 1000;\nconst RPC_CLOSE_MANUAL_SUSPEND = 4000;\n\nlet cacheId = 0;\n\n/**\n * The QIX Engine session object\n */\nclass Session {\n  /**\n   * Handle opened state. This event is triggered whenever the websocket is connected and ready for\n   * communication.\n   * @event Session#opened\n   * @type {Object}\n   */\n\n  /**\n   * Handle closed state. This event is triggered when the underlying websocket is closed and\n   * config.suspendOnClose is false.\n   * @event Session#closed\n   * @type {Object}\n   */\n\n  /**\n   * Handle suspended state. This event is triggered in two cases (listed below). It is useful\n   * in scenarios where you for example want to block interaction in your application until you\n   * are resumed again. If config.suspendOnClose is true and there was a network disconnect\n   * (socked closed) or if you ran session.suspend().\n   * @event Session#suspended\n   * @type {Object}\n   * @param {Object} evt Event object.\n   * @param {String} evt.initiator String indication what triggered the suspended state. Possible\n   * values network, manual.\n   */\n\n  /**\n   * Handle resumed state. This event is triggered when the session was properly resumed. It is\n   * useful in scenarios where you for example can close blocking modal dialogs and allow the user\n   * to interact with your application again.\n   * @event Session#resumed\n   * @type {Object}\n   */\n\n  /**\n   * Handle all JSON-RPC notification event, 'notification:*. Or handle a specific JSON-RPC\n   * notification event, 'notification:OnConnected'. These events depend on the product you use QIX\n   * Engine from.\n   * @event Session#notification\n   * @type {Object}\n   */\n\n  /**\n  * Handle websocket messages. Generally used in debugging purposes. traffic:* will handle all\n  * websocket messages, traffic:sent will handle outgoing messages and traffic:received will handle\n  * incoming messages.\n  * @event Session#traffic\n  * @type {Object}\n  */\n\n  constructor(options) {\n    const session = this;\n    Object.assign(session, options);\n    this.Promise = this.config.Promise;\n    this.definition = this.config.definition;\n    EventEmitter.mixin(session);\n    cacheId += 1;\n    session.id = cacheId;\n    session.rpc.on('socket-error', session.onRpcError.bind(session));\n    session.rpc.on('closed', session.onRpcClosed.bind(session));\n    session.rpc.on('message', session.onRpcMessage.bind(session));\n    session.rpc.on('notification', session.onRpcNotification.bind(session));\n    session.rpc.on('traffic', session.onRpcTraffic.bind(session));\n    session.on('closed', () => session.onSessionClosed());\n  }\n\n  /**\n  * Event handler for re-triggering error events from RPC.\n  * @private\n  * @emits socket-error\n  * @param {Error} err Webocket error event.\n  */\n  onRpcError(err) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    this.emit('socket-error', err);\n  }\n\n  /**\n  * Event handler for the RPC close event.\n  * @private\n  * @emits Session#suspended\n  * @emits Session#closed\n  * @param {Event} evt WebSocket close event.\n  */\n  onRpcClosed(evt) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    if (evt.code === RPC_CLOSE_NORMAL || evt.code === RPC_CLOSE_MANUAL_SUSPEND) {\n      return;\n    }\n    if (this.config.suspendOnClose) {\n      this.suspendResume.suspend().then(() => this.emit('suspended', { initiator: 'network' }));\n    } else {\n      this.emit('closed', evt);\n    }\n  }\n\n  /**\n  * Event handler for the RPC message event.\n  * @private\n  * @param {Object} response JSONRPC response.\n  */\n  onRpcMessage(response) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    if (response.change) {\n      response.change.forEach(handle => this.emitHandleChanged(handle));\n    }\n    if (response.close) {\n      response.close.forEach(handle => this.emitHandleClosed(handle));\n    }\n  }\n\n  /**\n  * Event handler for the RPC notification event.\n  * @private\n  * @emits Session#notification\n  * @param {Object} response The JSONRPC notification.\n  */\n  onRpcNotification(response) {\n    this.emit('notification:*', response.method, response.params);\n    this.emit(`notification:${response.method}`, response.params);\n  }\n\n  /**\n  * Event handler for the RPC traffic event.\n  * @private\n  * @emits Session#traffic\n  * @param {String} dir The traffic direction, sent or received.\n  * @param {Object} data JSONRPC request/response/WebSocket message.\n  * @param {Number} handle The associated handle.\n  */\n  onRpcTraffic(dir, data, handle) {\n    this.emit('traffic:*', dir, data);\n    this.emit(`traffic:${dir}`, data);\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('traffic:*', dir, data);\n      api.emit(`traffic:${dir}`, data);\n    }\n  }\n\n  /**\n  * Event handler for cleaning up API instances when a session has been closed.\n  * @private\n  * @emits API#closed\n  */\n  onSessionClosed() {\n    this.apis.getApis().forEach((entry) => {\n      entry.api.emit('closed');\n      entry.api.removeAllListeners();\n    });\n    this.apis.clear();\n  }\n\n  /**\n   * Function used to get an API for a backend object.\n   * @private\n   * @param {Object} args Arguments used to create object API.\n   * @param {Number} args.handle Handle of the backend object.\n   * @param {String} args.id ID of the backend object.\n   * @param {String} args.type QIX type of the backend object. Can for example\n   *                           be \"Doc\" or \"GenericVariable\".\n   * @param {String} args.genericType Custom type of the backend object, if defined in qInfo.\n   * @returns {*} Returns the generated and possibly augmented API.\n   */\n  getObjectApi(args) {\n    const {\n      handle, id, type, genericType,\n    } = args;\n    let api = this.apis.getApi(handle);\n    if (api) {\n      return api;\n    }\n    const factory = this.definition.generate(type);\n    api = factory(this, handle, id, genericType);\n    this.apis.add(handle, api);\n    return api;\n  }\n\n  /**\n  * Establishes the websocket against the configured URL and returns the Global instance.\n  * @emits Session#opened\n  * @returns {Promise<Object>} Eventually resolved if the connection was successful.\n  */\n  open() {\n    if (!this.globalPromise) {\n      const args = {\n        handle: -1,\n        id: 'Global',\n        type: 'Global',\n        genericType: 'Global',\n      };\n      this.globalPromise = this.rpc.open()\n        .then(() => this.getObjectApi(args))\n        .then((global) => {\n          this.emit('opened');\n          return global;\n        });\n    }\n    return this.globalPromise;\n  }\n\n  /**\n  * Function used to send data on the RPC socket.\n  * @param {Object} request The request to be sent. (data and some meta info)\n  * @returns {Object} Returns a promise instance.\n  */\n  send(request) {\n    if (this.suspendResume.isSuspended) {\n      return this.Promise.reject(new Error('Session suspended'));\n    }\n    request.id = this.rpc.createRequestId();\n    const promise = this.intercept.executeRequests(this, this.Promise.resolve(request))\n      .then((augmentedRequest) => {\n        const data = Object.assign({}, this.config.protocol, augmentedRequest);\n        // the outKey value is used by multiple-out interceptor, at some point\n        // we need to refactor that implementation and figure out how to transport\n        // this value without hijacking the JSONRPC request object:\n        delete data.outKey;\n        const response = this.rpc.send(data);\n        augmentedRequest.retry = () => this.send(request);\n        return this.intercept.executeResponses(this, response, augmentedRequest);\n      });\n    Session.addToPromiseChain(promise, 'requestId', request.id);\n    return promise;\n  }\n\n  /**\n  * Suspends the enigma.js session by closing the websocket and rejecting all method calls\n  * until is has been resumed again.\n  * @emits Session#suspended\n  * @returns {Promise<Object>} Eventually resolved when the websocket has been closed.\n  */\n  suspend() {\n    return this.suspendResume.suspend()\n      .then(() => this.emit('suspended', { initiator: 'manual' }));\n  }\n\n  /**\n  * Resumes a previously suspended enigma.js session by re-creating the websocket and,\n  * if possible, re-open the document as well as refreshing the internal cashes. If successful,\n  * changed events will be triggered on all generated APIs, and on the ones it was unable to\n  * restore, the closed event will be triggered.\n  * @emits Session#resumed\n  * @param {Boolean} onlyIfAttached If true, resume only if the session was re-attached properly.\n  * @returns {Promise<Object>} Eventually resolved when the websocket (and potentially the\n  * previously opened document, and generated APIs) has been restored, rejected when it fails any\n  * of those steps, or when onlyIfAttached is true and a new session was created.\n  */\n  resume(onlyIfAttached) {\n    return this.suspendResume.resume(onlyIfAttached).then((value) => {\n      this.emit('resumed');\n      return value;\n    });\n  }\n\n  /**\n  * Closes the websocket and cleans up internal caches, also triggers the closed event\n  * on all generated APIs. Note that you have to manually invoke this when you want to\n  * close a session and config.suspendOnClose is true.\n  * @emits Session#closed\n  * @returns {Promise<Object>} Eventually resolved when the websocket has been closed.\n  */\n  close() {\n    this.globalPromise = undefined;\n    return this.rpc.close().then(evt => this.emit('closed', evt));\n  }\n\n  /**\n  * Given a handle, this function will emit the 'changed' event on the\n  * corresponding API instance.\n  * @private\n  * @param {Number} handle The handle of the API instance.\n  * @emits API#changed\n  */\n  emitHandleChanged(handle) {\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('changed');\n    }\n  }\n\n  /**\n  * Given a handle, this function will emit the 'closed' event on the\n  * corresponding API instance.\n  * @private\n  * @param {Number} handle The handle of the API instance.\n  * @emits API#closed\n  */\n  emitHandleClosed(handle) {\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('closed');\n      api.removeAllListeners();\n    }\n  }\n\n  /**\n  * Function used to add info on the promise chain.\n  * @private\n  * @param {Promise<Object>} promise The promise to add info on.\n  * @param {String} name The property to add info on.\n  * @param {Any} value The info to add.\n  */\n  static addToPromiseChain(promise, name, value) {\n    promise[name] = value;\n    const { then } = promise;\n    promise.then = function patchedThen(...params) {\n      const chain = then.apply(this, params);\n      Session.addToPromiseChain(chain, name, value);\n      return chain;\n    };\n  }\n}\n\nexport default Session;\n","/**\n* Key-value cache\n* @private\n*/\nclass KeyValueCache {\n  constructor() {\n    this.entries = {};\n  }\n\n  /**\n  * Adds an entry.\n  * @private\n  * @function KeyValueCache#add\n  * @param {String} key The key representing an entry.\n  * @param {*} entry The entry to be added.\n  */\n  add(key, entry) {\n    key += '';\n    if (typeof this.entries[key] !== 'undefined') {\n      throw new Error(`Entry already defined with key ${key}`);\n    }\n    this.entries[key] = entry;\n  }\n\n  /**\n  * Sets an entry.\n  * @private\n  * @function KeyValueCache#set\n  * @param {String} key The key representing an entry.\n  * @param {*} entry The entry.\n  */\n  set(key, entry) {\n    key += '';\n    this.entries[key] = entry;\n  }\n\n  /**\n  * Removes an entry.\n  * @private\n  * @function KeyValueCache#remove\n  * @param {String} key The key representing an entry.\n  */\n  remove(key) {\n    delete this.entries[key];\n  }\n\n  /**\n  * Gets an entry.\n  * @private\n  * @function KeyValueCache#get\n  * @param {String} key The key representing an entry.\n  * @returns {*} The entry for the key.\n  */\n  get(key) {\n    return this.entries[key];\n  }\n\n  /**\n  * Gets a list of all entries.\n  * @private\n  * @function KeyValueCache#getAll\n  * @returns {Array} The list of entries including its `key` and `value` properties.\n  */\n  getAll() {\n    return Object.keys(this.entries).map(key => ({\n      key,\n      value: this.entries[key],\n    }));\n  }\n\n  /**\n  * Gets a key for an entry.\n  * @private\n  * @function KeyValueCache#getKey\n  * @param {*} entry The entry to locate the key for.\n  * @returns {String} The key representing an entry.\n  */\n  getKey(entry) {\n    return Object.keys(this.entries).filter(key => this.entries[key] === entry)[0];\n  }\n\n  /**\n  * Clears the cache of all entries.\n  * @private\n  * @function KeyValueCache#clear\n  */\n  clear() {\n    this.entries = {};\n  }\n}\n\nexport default KeyValueCache;\n","import KeyValueCache from './cache';\nimport Events from './event-emitter';\n\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n* Returns the camelCase counterpart of a symbol.\n* @private\n* @param {String} symbol The symbol.\n* @return the camelCase counterpart.\n*/\nfunction toCamelCase(symbol) {\n  return symbol.substring(0, 1).toLowerCase() + symbol.substring(1);\n}\n\n/**\n * A facade function that allows parameters to be passed either by name\n * (through an object), or by position (through an array).\n * @private\n * @param {Function} base The function that is being overriden. Will be\n *                        called with parameters in array-form.\n * @param {Object} defaults Parameter list and it's default values.\n * @param {*} params The parameters.\n */\nfunction namedParamFacade(base, defaults, ...params) {\n  if (params.length === 1 && typeof params[0] === 'object' && !Array.isArray(params[0])) {\n    const valid = Object.keys(params[0]).every(key => hasOwnProperty.call(defaults, key));\n    if (valid) {\n      params = Object.keys(defaults).map(key => params[0][key] || defaults[key]);\n    }\n  }\n  return base.apply(this, params);\n}\n\n/**\n* Qix schema definition.\n* @private\n*/\nclass Schema {\n  /**\n  * Create a new schema instance.\n  * @private\n  * @param {Configuration} config The configuration for QIX.\n  */\n  constructor(config) {\n    this.config = config;\n    this.Promise = config.Promise;\n    this.schema = config.schema;\n    this.mixins = new KeyValueCache();\n    this.types = new KeyValueCache();\n  }\n\n  registerMixin({\n    types, type, extend, override, init,\n  }) {\n    if (!Array.isArray(types)) {\n      types = [types];\n    }\n    // to support a single type\n    if (type) {\n      types.push(type);\n    }\n    const cached = { extend, override, init };\n    types.forEach((typeKey) => {\n      const entryList = this.mixins.get(typeKey);\n      if (entryList) {\n        entryList.push(cached);\n      } else {\n        this.mixins.add(typeKey, [cached]);\n      }\n    });\n  }\n\n  /**\n  * Function used to generate a type definition.\n  * @private\n  * @param {String} type The type.\n  * @returns {{create: Function, def: Object}} Returns an object with a definition\n  *          of the type and a create factory.\n  */\n  generate(type) {\n    const entry = this.types.get(type);\n    if (entry) {\n      return entry;\n    }\n    if (!this.schema.structs[type]) {\n      throw new Error(`${type} not found`);\n    }\n    const factory = this.generateApi(type, this.schema.structs[type]);\n    this.types.add(type, factory);\n    return factory;\n  }\n\n  /**\n  * Function used to generate an API definition for a given type.\n  * @private\n  * @param {String} type The type to generate.\n  * @param {Object} schema The schema describing the type.\n  * @returns {{create: (function(session:Object, handle:Number, id:String,\n  *          customKey:String)), def: Object}} Returns the API definition.\n  */\n  generateApi(type, schema) {\n    const api = Object.create({});\n\n    this.generateDefaultApi(api, schema); // Generate default\n    this.mixinType(type, api); // Mixin default type\n    this.mixinNamedParamFacade(api, schema); // Mixin named parameter support\n\n    return function create(session, handle, id, customKey) {\n      const instance = Object.create(api);\n\n      Events.mixin(instance); // Always mixin event-emitter per instance\n\n      Object.defineProperties(instance, {\n        session: {\n          enumerable: true,\n          value: session,\n        },\n        handle: {\n          enumerable: true,\n          value: handle,\n          writable: true,\n        },\n        id: {\n          enumerable: true,\n          value: id,\n        },\n        type: {\n          enumerable: true,\n          value: type,\n        },\n        genericType: {\n          enumerable: true,\n          value: customKey,\n        },\n      });\n\n      let mixinList = this.mixins.get(type) || [];\n      if (customKey !== type) {\n        this.mixinType(customKey, instance); // Mixin custom types\n        mixinList = mixinList.concat(this.mixins.get(customKey) || []);\n      }\n      mixinList.forEach((mixin) => {\n        if (typeof mixin.init === 'function') {\n          mixin.init({ config: this.config, api: instance });\n        }\n      });\n\n      return instance;\n    }.bind(this);\n  }\n\n  /**\n  * Function used to generate the methods with the right handlers to the object\n  * API that is being generated.\n  * @private\n  * @param {Object} api The object API that is currently being generated.\n  * @param {Object} schema The API definition.\n  */\n  generateDefaultApi(api, schema) {\n    Object.keys(schema).forEach((method) => {\n      const out = schema[method].Out;\n      const outKey = out.length === 1 ? out[0].Name : -1;\n      const fnName = toCamelCase(method);\n\n      api[fnName] = function generatedMethod(...params) {\n        return this.session.send({\n          handle: this.handle,\n          method,\n          params,\n          outKey,\n        });\n      };\n    });\n  }\n\n  /**\n  * Function used to add mixin methods to a specified API.\n  * @private\n  * @param {String} type Used to specify which mixin should be woven in.\n  * @param {Object} api The object that will be woven.\n  */\n  mixinType(type, api) {\n    const mixinList = this.mixins.get(type);\n    if (mixinList) {\n      mixinList.forEach(({ extend = {}, override = {} }) => {\n        Object.keys(override).forEach((key) => {\n          if (typeof api[key] === 'function' && typeof override[key] === 'function') {\n            const baseFn = api[key];\n            api[key] = function wrappedFn(...args) {\n              return override[key].apply(this, [baseFn.bind(this), ...args]);\n            };\n          } else {\n            throw new Error(`No function to override. Type: ${type} function: ${key}`);\n          }\n        });\n        Object.keys(extend).forEach((key) => {\n          // handle overrides\n          if (typeof api[key] === 'function' && typeof extend[key] === 'function') {\n            throw new Error(`Extend is not allowed for this mixin. Type: ${type} function: ${key}`);\n          } else {\n            api[key] = extend[key];\n          }\n        });\n      });\n    }\n  }\n\n  /**\n  * Function used to mixin the named parameter facade.\n  * @private\n  * @param {Object} api The object API that is currently being generated.\n  * @param {Object} schema The API definition.\n  */\n  mixinNamedParamFacade(api, schema) {\n    Object.keys(schema).forEach((key) => {\n      const fnName = toCamelCase(key);\n      const base = api[fnName];\n      const defaults = schema[key].In.reduce((result, item) => {\n        result[item.Name] = item.DefaultValue;\n        return result;\n      }, {});\n\n      api[fnName] = function namedParamWrapper(...params) {\n        return namedParamFacade.apply(this, [base, defaults, ...params]);\n      };\n    });\n  }\n}\n\nexport default Schema;\n","import Events from './event-emitter';\n\n/**\n * Helper class for handling RPC calls\n * @private\n */\nclass RPCResolver {\n  constructor(id, handle, resolve, reject) {\n    Events.mixin(this);\n    this.id = id;\n    this.handle = handle;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n\n  resolveWith(data) {\n    this.resolve(data);\n    this.emit('resolved', this.id);\n  }\n\n  rejectWith(err) {\n    this.reject(err);\n    this.emit('rejected', this.id);\n  }\n}\n\nexport default RPCResolver;\n","import Events from './event-emitter';\nimport RPCResolver from './rpc-resolver';\n\n/**\n* This class handles remote procedure calls on a web socket.\n* @private\n*/\nclass RPC {\n  /**\n  * Create a new RPC instance.\n  * @private\n  * @param {Object} options The configuration options for this class.\n  * @param {Function} options.Promise The promise constructor to use.\n  * @param {String} options.url The complete websocket URL used to connect.\n  * @param {Function} options.createSocket The function callback to create a WebSocket.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    Events.mixin(this);\n    this.resolvers = {};\n    this.requestId = 0;\n    this.openedPromise = undefined;\n  }\n\n  /**\n  * Opens a connection to the configured endpoint.\n  * @private\n  * @param {Boolean} force - ignores all previous and outstanding open calls if set to true.\n  * @returns {Object} A promise instance.\n  */\n  open(force = false) {\n    if (!force && this.openedPromise) {\n      return this.openedPromise;\n    }\n\n    try {\n      this.socket = this.createSocket(this.url);\n    } catch (err) {\n      return this.Promise.reject(err);\n    }\n\n    this.socket.onopen = this.onOpen.bind(this);\n    this.socket.onclose = this.onClose.bind(this);\n    this.socket.onerror = this.onError.bind(this);\n    this.socket.onmessage = this.onMessage.bind(this);\n    this.openedPromise = new this.Promise((resolve, reject) => this.registerResolver('opened', null, resolve, reject));\n    this.closedPromise = new this.Promise((resolve, reject) => this.registerResolver('closed', null, resolve, reject));\n    return this.openedPromise;\n  }\n\n  /**\n  * Resolves the open promise when a connection is successfully established.\n  * @private\n  */\n  onOpen() {\n    this.resolvers.opened.resolveWith(() => this.closedPromise);\n  }\n\n  /**\n  * Resolves the close promise when a connection is closed.\n  * @private\n  * @param {Object} event - The event describing close.\n  */\n  onClose(event) {\n    this.emit('closed', event);\n    this.resolvers.closed.resolveWith(event);\n    this.rejectAllOutstandingResolvers({ code: -1, message: 'Socket closed' });\n  }\n\n  /**\n  * Closes a connection.\n  * @private\n  * @param {Number} [code=1000] - The reason code for closing the connection.\n  * @param {String} [reason=\"\"] - The human readable string describing why the connection is closed.\n  * @returns {Object} Returns a promise instance.\n  */\n  close(code = 1000, reason = '') {\n    if (this.socket) {\n      this.socket.close(code, reason);\n      this.socket = null;\n    }\n    return this.closedPromise;\n  }\n\n  /**\n  * Emits an error event and rejects the open promise if an error is raised on the connection.\n  * @private\n  * @param {Object} event - The event describing the error.\n  */\n  onError(event) {\n    if (this.resolvers.opened) {\n      this.resolvers.opened.rejectWith(event);\n    } else {\n      // only emit errors after the initial open promise has been resolved,\n      // this makes it possible to catch early websocket errors as well\n      // as run-time ones:\n      this.emit('socket-error', event);\n    }\n    this.rejectAllOutstandingResolvers({ code: -1, message: 'Socket error' });\n  }\n\n  /**\n  * Parses the onMessage event on the connection and resolve the promise for the request.\n  * @private\n  * @param {Object} event - The event describing the message.\n  */\n  onMessage(event) {\n    const data = JSON.parse(event.data);\n    const resolver = this.resolvers[data.id] || {};\n    this.emit('traffic', 'received', data, resolver.handle);\n    if (typeof data.id !== 'undefined') {\n      this.emit('message', data);\n      this.resolvers[data.id].resolveWith(data);\n    } else {\n      this.emit(data.params ? 'notification' : 'message', data);\n    }\n  }\n\n  /**\n  * Rejects all outstanding resolvers.\n  * @private\n  * @param {Object} reason - The reject reason.\n  */\n  rejectAllOutstandingResolvers(reason) {\n    Object.keys(this.resolvers).forEach((id) => {\n      if (id === 'opened' || id === 'closed') {\n        return; // \"opened\" and \"closed\" should not be handled here\n      }\n      const resolver = this.resolvers[id];\n      resolver.rejectWith(reason);\n    });\n  }\n\n  /**\n  * Unregisters a resolver.\n  * @private\n  * @param {Number|String} id - The ID to unregister the resolver with.\n  */\n  unregisterResolver(id) {\n    const resolver = this.resolvers[id];\n    resolver.removeAllListeners();\n    delete this.resolvers[id];\n  }\n\n  /**\n  * Registers a resolver.\n  * @private\n  * @param {Number|String} id - The ID to register the resolver with.\n  * @param {Number} handle - The associated handle.\n  * @returns {Function} The promise executor function.\n  */\n  registerResolver(id, handle, resolve, reject) {\n    const resolver = new RPCResolver(id, handle, resolve, reject);\n    this.resolvers[id] = resolver;\n    resolver.on('resolved', resolvedId => this.unregisterResolver(resolvedId));\n    resolver.on('rejected', rejectedId => this.unregisterResolver(rejectedId));\n  }\n\n  /**\n  * Sends data on the socket.\n  * @private\n  * @param {Object} data - The data to send.\n  * @returns {Object} A promise instance.\n  */\n  send(data) {\n    if (!this.socket || this.socket.readyState !== this.socket.OPEN) {\n      const error = new Error('Not connected');\n      error.code = -1;\n      return this.Promise.reject(error);\n    }\n    if (!data.id) {\n      data.id = this.createRequestId();\n    }\n    data.jsonrpc = '2.0';\n    return new this.Promise((resolve, reject) => {\n      this.socket.send(JSON.stringify(data));\n      this.emit('traffic', 'sent', data, data.handle);\n      return this.registerResolver(data.id, data.handle, resolve, reject);\n    });\n  }\n\n  createRequestId() {\n    this.requestId += 1;\n    return this.requestId;\n  }\n}\n\nexport default RPC;\n","const ON_ATTACHED_TIMEOUT_MS = 5000;\nconst RPC_CLOSE_MANUAL_SUSPEND = 4000;\n\nclass SuspendResume {\n  /**\n  * Creates a new SuspendResume instance.\n  * @private\n  * @param {Object} options The configuration option for this class.\n  * @param {Promise<Object>} options.Promise The promise constructor to use.\n  * @param {RPC} options.rpc The RPC instance to use when communicating towards Engine.\n  * @param {ApiCache} options.apis The ApiCache instance to use.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    this.isSuspended = false;\n    this.rpc.on('traffic', (dir, data) => {\n      if (dir === 'sent' && data.method === 'OpenDoc') {\n        this.openDocParams = data.params;\n      }\n    });\n  }\n\n  /**\n  * Function used to restore the rpc connection.\n  * @private\n  * @param {Boolean} onlyIfAttached - if true, the returned promise will resolve\n  *                                   only if the session can be re-attached.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreRpcConnection(onlyIfAttached) {\n    return this.reopen(ON_ATTACHED_TIMEOUT_MS).then((sessionState) => {\n      if (sessionState === 'SESSION_CREATED' && onlyIfAttached) {\n        return this.Promise.reject(new Error('Not attached'));\n      }\n      return this.Promise.resolve();\n    });\n  }\n\n  /**\n  * Function used to restore the global API.\n  * @private\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreGlobal(changed) {\n    const global = this.apis.getApisByType('Global').pop();\n    changed.push(global.api);\n    return this.Promise.resolve();\n  }\n\n  /**\n  * Function used to restore the doc API.\n  * @private\n  * @param {String} sessionState - The state of the session, attached or created.\n  * @param {Array} closed - A list where the closed of APIs APIs will be added.\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreDoc(closed, changed) {\n    const doc = this.apis.getApisByType('Doc').pop();\n\n    if (!doc) {\n      return this.Promise.resolve();\n    }\n\n    return this.rpc.send({\n      method: 'GetActiveDoc',\n      handle: -1,\n      params: [],\n    }).then((response) => {\n      if (response.error && this.openDocParams) {\n        return this.rpc.send({\n          method: 'OpenDoc',\n          handle: -1,\n          params: this.openDocParams,\n        });\n      }\n      return response;\n    }).then((response) => {\n      if (response.error) {\n        closed.push(doc.api);\n        return this.Promise.resolve();\n      }\n      const handle = response.result.qReturn.qHandle;\n      doc.api.handle = handle;\n      changed.push(doc.api);\n      return this.Promise.resolve(doc.api);\n    });\n  }\n\n  /**\n  * Function used to restore the APIs on the doc.\n  * @private\n  * @param {Object} doc - The doc API on which the APIs we want to restore exist.\n  * @param {Array} closed - A list where the closed of APIs APIs will be added.\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreDocObjects(doc, closed, changed) {\n    const tasks = [];\n    const apis = this.apis.getApis()\n      .map(entry => entry.api)\n      .filter(api => api.type !== 'Global' && api.type !== 'Doc');\n\n    if (!doc) {\n      apis.forEach(api => closed.push(api));\n      return this.Promise.resolve();\n    }\n\n    apis.forEach((api) => {\n      const method = SuspendResume.buildGetMethodName(api.type);\n\n      if (!method) {\n        closed.push(api);\n      } else {\n        const request = this.rpc.send({\n          method,\n          handle: doc.handle,\n          params: [api.id],\n        }).then((response) => {\n          if (response.error || !response.result.qReturn.qHandle) {\n            closed.push(api);\n          } else {\n            api.handle = response.result.qReturn.qHandle;\n            changed.push(api);\n          }\n        });\n        tasks.push(request);\n      }\n    });\n    return this.Promise.all(tasks);\n  }\n\n  /**\n  * Set the instance as suspended.\n  * @private\n  */\n  suspend() {\n    this.isSuspended = true;\n    return this.rpc.close(RPC_CLOSE_MANUAL_SUSPEND);\n  }\n\n  /**\n  * Resumes a previously suspended RPC connection, and refreshes the API cache.\n  *                                APIs unabled to be restored has their 'closed'\n  *                                event triggered, otherwise 'changed'.\n  * @private\n  * @emits API#changed\n  * @emits APIfunction@#closed\n  * @param {Boolean} onlyIfAttached if true, resume only if the session was re-attached.\n  * @returns {Promise<Object>} Eventually resolved if the RPC connection was successfully resumed,\n  *                    otherwise rejected.\n  */\n  resume(onlyIfAttached) {\n    const changed = [];\n    const closed = [];\n\n    return this.restoreRpcConnection(onlyIfAttached)\n      .then(() => this.restoreGlobal(changed))\n      .then(() => this.restoreDoc(closed, changed))\n      .then(doc => this.restoreDocObjects(doc, closed, changed))\n      .then(() => {\n        this.isSuspended = false;\n        this.apis.clear();\n        closed.forEach((api) => {\n          api.emit('closed');\n          api.removeAllListeners();\n        });\n        changed.forEach((api) => {\n          this.apis.add(api.handle, api);\n          if (api.type !== 'Global') {\n            api.emit('changed');\n          }\n        });\n      })\n      .catch(err => this.rpc.close().then(() => this.Promise.reject(err)));\n  }\n\n  /**\n  * Reopens the connection and waits for the OnConnected notification.\n  * @private\n  * @param {Number} timeout - The time to wait for the OnConnected notification.\n  * @returns {Object} A promise containing the session state (SESSION_CREATED or SESSION_ATTACHED).\n  */\n  reopen(timeout) {\n    let timer;\n    let notificationResolve;\n    let notificationReceived = false;\n    const notificationPromise = new this.Promise((resolve) => { notificationResolve = resolve; });\n\n    const waitForNotification = () => {\n      if (!notificationReceived) {\n        timer = setTimeout(() => notificationResolve('SESSION_CREATED'), timeout);\n      }\n      return notificationPromise;\n    };\n\n    const onNotification = (data) => {\n      if (data.method !== 'OnConnected') return;\n      clearTimeout(timer);\n      notificationResolve(data.params.qSessionState);\n      notificationReceived = true;\n    };\n\n    this.rpc.on('notification', onNotification);\n\n    return this.rpc.open(true)\n      .then(waitForNotification)\n      .then((state) => {\n        this.rpc.removeListener('notification', onNotification);\n        return state;\n      })\n      .catch((err) => {\n        this.rpc.removeListener('notification', onNotification);\n        return this.Promise.reject(err);\n      });\n  }\n\n  /**\n  * Function used to build the get method names for Doc APIs.\n  * @private\n  * @param {String} type - The API type.\n  * @returns {String} Returns the get method name, or undefined if the type cannot be restored.\n  */\n  static buildGetMethodName(type) {\n    if (type === 'Field' || type === 'Variable') {\n      return null;\n    }\n    if (type === 'GenericVariable') {\n      return 'GetVariableById';\n    }\n    return type.replace('Generic', 'Get');\n  }\n}\n\nexport default SuspendResume;\n","const SUCCESS_KEY = 'qSuccess';\n\nexport default function deltaRequestInterceptor(session, request) {\n  const delta = session.config.protocol.delta\n    && request.outKey !== -1\n    && request.outKey !== SUCCESS_KEY;\n  if (delta) {\n    request.delta = delta;\n  }\n  return request;\n}\n","/**\n* Response interceptor for generating APIs. Handles the quirks of engine not\n* returning an error when an object is missing.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the generated API\n*/\nexport default function apiInterceptor(session, request, response) {\n  if (response.qHandle && response.qType) {\n    return session.getObjectApi({\n      handle: response.qHandle,\n      type: response.qType,\n      id: response.qGenericId,\n      genericType: response.qGenericType,\n    });\n  }\n  if (response.qHandle === null && response.qType === null) {\n    return session.config.Promise.reject(new Error('Object not found'));\n  }\n  return response;\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import originalExtend from 'extend';\n\nconst extend = originalExtend.bind(null, true);\nconst JSONPatch = {};\nconst { isArray } = Array;\nfunction isObject(v) { return v != null && !Array.isArray(v) && typeof v === 'object'; }\nfunction isUndef(v) { return typeof v === 'undefined'; }\nfunction isFunction(v) { return typeof v === 'function'; }\n\n/**\n* Generate an exact duplicate (with no references) of a specific value.\n*\n* @private\n* @param {Object} The value to duplicate\n* @returns {Object} a unique, duplicated value\n*/\nfunction generateValue(val) {\n  if (val) {\n    return extend({}, { val }).val;\n  }\n  return val;\n}\n\n/**\n* An additional type checker used to determine if the property is of internal\n* use or not a type that can be translated into JSON (like functions).\n*\n* @private\n* @param {Object} obj The object which has the property to check\n* @param {String} The property name to check\n* @returns {Boolean} Whether the property is deemed special or not\n*/\nfunction isSpecialProperty(obj, key) {\n  return isFunction(obj[key])\n    || key.substring(0, 2) === '$$'\n    || key.substring(0, 1) === '_';\n}\n\n/**\n* Finds the parent object from a JSON-Pointer (\"/foo/bar/baz\" = \"bar\" is \"baz\" parent),\n* also creates the object structure needed.\n*\n* @private\n* @param {Object} data The root object to traverse through\n* @param {String} The JSON-Pointer string to use when traversing\n* @returns {Object} The parent object\n*/\nfunction getParent(data, str) {\n  const seperator = '/';\n  const parts = str.substring(1).split(seperator).slice(0, -1);\n  let numPart;\n\n  parts.forEach((part, i) => {\n    if (i === parts.length) {\n      return;\n    }\n    numPart = +part;\n    const newPart = !isNaN(numPart) ? [] : {};\n    data[numPart || part] = isUndef(data[numPart || part])\n      ? newPart\n      : data[part];\n    data = data[numPart || part];\n  });\n\n  return data;\n}\n\n/**\n* Cleans an object of all its properties, unless they're deemed special or\n* cannot be removed by configuration.\n*\n* @private\n* @param {Object} obj The object to clean\n*/\nfunction emptyObject(obj) {\n  Object.keys(obj).forEach((key) => {\n    const config = Object.getOwnPropertyDescriptor(obj, key);\n\n    if (config.configurable && !isSpecialProperty(obj, key)) {\n      delete obj[key];\n    }\n  });\n}\n\n/**\n* Compare an object with another, could be object, array, number, string, bool.\n* @private\n* @param {Object} a The first object to compare\n* @param {Object} a The second object to compare\n* @returns {Boolean} Whether the objects are identical\n*/\nfunction compare(a, b) {\n  let isIdentical = true;\n\n  if (isObject(a) && isObject(b)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n    Object.keys(a).forEach((key) => {\n      if (!compare(a[key], b[key])) {\n        isIdentical = false;\n      }\n    });\n    return isIdentical;\n  } if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0, l = a.length; i < l; i += 1) {\n      if (!compare(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a === b;\n}\n\n/**\n* Generates patches by comparing two arrays.\n*\n* @private\n* @param {Array} oldA The old (original) array, which will be patched\n* @param {Array} newA The new array, which will be used to compare against\n* @returns {Array} An array of patches (if any)\n*/\nfunction patchArray(original, newA, basePath) {\n  let patches = [];\n  const oldA = original.slice();\n  let tmpIdx = -1;\n\n  function findIndex(a, id, idx) {\n    if (a[idx] && isUndef(a[idx].qInfo)) {\n      return null;\n    } if (a[idx] && a[idx].qInfo.qId === id) {\n      // shortcut if identical\n      return idx;\n    }\n    for (let ii = 0, ll = a.length; ii < ll; ii += 1) {\n      if (a[ii] && a[ii].qInfo.qId === id) {\n        return ii;\n      }\n    }\n    return -1;\n  }\n\n  if (compare(newA, oldA)) {\n    // array is unchanged\n    return patches;\n  }\n\n  if (!isUndef(newA[0]) && isUndef(newA[0].qInfo)) {\n    // we cannot create patches without unique identifiers, replace array...\n    patches.push({\n      op: 'replace',\n      path: basePath,\n      value: newA,\n    });\n    return patches;\n  }\n\n  for (let i = oldA.length - 1; i >= 0; i -= 1) {\n    tmpIdx = findIndex(newA, oldA[i].qInfo && oldA[i].qInfo.qId, i);\n    if (tmpIdx === -1) {\n      patches.push({\n        op: 'remove',\n        path: `${basePath}/${i}`,\n      });\n      oldA.splice(i, 1);\n    } else {\n      patches = patches.concat(JSONPatch.generate(oldA[i], newA[tmpIdx], `${basePath}/${i}`));\n    }\n  }\n\n  for (let i = 0, l = newA.length; i < l; i += 1) {\n    tmpIdx = findIndex(oldA, newA[i].qInfo && newA[i].qInfo.qId);\n    if (tmpIdx === -1) {\n      patches.push({\n        op: 'add',\n        path: `${basePath}/${i}`,\n        value: newA[i],\n      });\n      oldA.splice(i, 0, newA[i]);\n    } else if (tmpIdx !== i) {\n      patches.push({\n        op: 'move',\n        path: `${basePath}/${i}`,\n        from: `${basePath}/${tmpIdx}`,\n      });\n      oldA.splice(i, 0, oldA.splice(tmpIdx, 1)[0]);\n    }\n  }\n  return patches;\n}\n\n/**\n* Generate an array of JSON-Patch:es following the JSON-Patch Specification Draft.\n*\n* See [specification draft](http://tools.ietf.org/html/draft-ietf-appsawg-json-patch-10)\n*\n* Does NOT currently generate patches for arrays (will replace them)\n* @private\n* @param {Object} original The object to patch to\n* @param {Object} newData The object to patch from\n* @param {String} [basePath] The base path to use when generating the paths for\n*                            the patches (normally not used)\n* @returns {Array} An array of patches\n*/\nJSONPatch.generate = function generate(original, newData, basePath) {\n  basePath = basePath || '';\n  let patches = [];\n\n  Object.keys(newData).forEach((key) => {\n    const val = generateValue(newData[key]);\n    const oldVal = original[key];\n    const tmpPath = `${basePath}/${key}`;\n\n    if (compare(val, oldVal) || isSpecialProperty(newData, key)) {\n      return;\n    }\n    if (isUndef(oldVal)) {\n      // property does not previously exist\n      patches.push({\n        op: 'add',\n        path: tmpPath,\n        value: val,\n      });\n    } else if (isObject(val) && isObject(oldVal)) {\n      // we need to generate sub-patches for this, since it already exist\n      patches = patches.concat(JSONPatch.generate(oldVal, val, tmpPath));\n    } else if (isArray(val) && isArray(oldVal)) {\n      patches = patches.concat(patchArray(oldVal, val, tmpPath));\n    } else {\n      // it's a simple property (bool, string, number)\n      patches.push({\n        op: 'replace',\n        path: `${basePath}/${key}`,\n        value: val,\n      });\n    }\n  });\n\n  Object.keys(original).forEach((key) => {\n    if (isUndef(newData[key]) && !isSpecialProperty(original, key)) {\n      // this property does not exist anymore\n      patches.push({\n        op: 'remove',\n        path: `${basePath}/${key}`,\n      });\n    }\n  });\n\n  return patches;\n};\n\n/**\n* Apply a list of patches to an object.\n* @private\n* @param {Object} original The object to patch\n* @param {Array} patches The list of patches to apply\n*/\nJSONPatch.apply = function apply(original, patches) {\n  patches.forEach((patch) => {\n    let parent = getParent(original, patch.path);\n    let key = patch.path.split('/').splice(-1)[0];\n    let target = key && isNaN(+key) ? parent[key] : parent[+key] || parent;\n    const from = patch.from ? patch.from.split('/').splice(-1)[0] : null;\n\n    if (patch.path === '/') {\n      parent = null;\n      target = original;\n    }\n\n    if (patch.op === 'add' || patch.op === 'replace') {\n      if (isArray(parent)) {\n        // trust indexes from patches, so don't replace the index if it's an add\n        if (key === '-') {\n          key = parent.length;\n        }\n        parent.splice(+key, patch.op === 'add' ? 0 : 1, patch.value);\n      } else if (isArray(target) && isArray(patch.value)) {\n        const newValues = patch.value.slice();\n        // keep array reference if possible...\n        target.length = 0;\n        target.push(...newValues);\n      } else if (isObject(target) && isObject(patch.value)) {\n        // keep object reference if possible...\n        emptyObject(target);\n        extend(target, patch.value);\n      } else if (!parent) {\n        throw new Error('Patchee is not an object we can patch');\n      } else {\n        // simple value\n        parent[key] = patch.value;\n      }\n    } else if (patch.op === 'move') {\n      const oldParent = getParent(original, patch.from);\n      if (isArray(parent)) {\n        parent.splice(+key, 0, oldParent.splice(+from, 1)[0]);\n      } else {\n        parent[key] = oldParent[from];\n        delete oldParent[from];\n      }\n    } else if (patch.op === 'remove') {\n      if (isArray(parent)) {\n        parent.splice(+key, 1);\n      } else {\n        delete parent[key];\n      }\n    }\n  });\n};\n\n/**\n* Deep clone an object.\n* @private\n* @param {Object} obj The object to clone\n* @returns {Object} A new object identical to the `obj`\n*/\nJSONPatch.clone = function clone(obj) {\n  return extend({}, obj);\n};\n\n/**\n* Creates a JSON-patch.\n* @private\n* @param {String} op The operation of the patch. Available values: \"add\", \"remove\", \"move\"\n* @param {Object} [val] The value to set the `path` to. If `op` is `move`, `val`\n*                       is the \"from JSON-path\" path\n* @param {String} path The JSON-path for the property to change (e.g. \"/qHyperCubeDef/columnOrder\")\n* @returns {Object} A patch following the JSON-patch specification\n*/\nJSONPatch.createPatch = function createPatch(op, val, path) {\n  const patch = {\n    op: op.toLowerCase(),\n    path,\n  };\n  if (patch.op === 'move') {\n    patch.from = val;\n  } else if (typeof val !== 'undefined') {\n    patch.value = val;\n  }\n  return patch;\n};\n\n/**\n* Apply the differences of two objects (keeping references if possible).\n* Identical to running `JSONPatch.apply(original, JSONPatch.generate(original, newData));`\n* @private\n* @param {Object} original The object to update/patch\n* @param {Object} newData the object to diff against\n*\n* @example\n* var obj1 = { foo: [1,2,3], bar: { baz: true, qux: 1 } };\n* var obj2 = { foo: [4,5,6], bar: { baz: false } };\n* JSONPatch.updateObject(obj1, obj2);\n* // => { foo: [4,5,6], bar: { baz: false } };\n*/\nJSONPatch.updateObject = function updateObject(original, newData) {\n  if (!Object.keys(original).length) {\n    extend(original, newData);\n    return;\n  }\n  JSONPatch.apply(original, JSONPatch.generate(original, newData));\n};\n\nexport default JSONPatch;\n","import JSONPatch from '../../json-patch';\nimport KeyValueCache from '../../cache';\n\nconst sessions = {};\n\n/**\n* Function to make sure we release handle caches when they are closed.\n* @private\n* @param {Session} session The session instance to listen on.\n*/\nconst bindSession = (session) => {\n  if (!sessions[session.id]) {\n    const cache = {};\n    sessions[session.id] = cache;\n    session.on('traffic:received', data => data.close && data.close.forEach(handle => delete cache[handle]));\n    session.on('closed', () => delete sessions[session.id]);\n  }\n};\n\n/**\n* Simple function that ensures the session events has been bound, and returns\n* either an existing key-value cache or creates one for the specified handle.\n* @private\n* @param {Session} session The session that owns the handle.\n* @param {Number} handle The object handle to retrieve the cache for.\n* @returns {KeyValueCache} The cache instance.\n*/\nconst getHandleCache = (session, handle) => {\n  bindSession(session);\n  const cache = sessions[session.id];\n  if (!cache[handle]) {\n    cache[handle] = new KeyValueCache();\n  }\n  return cache[handle];\n};\n\n/**\n* Function used to apply a list of patches and return the patched value.\n* @private\n* @param {Session} session The session.\n* @param {Number} handle The object handle.\n* @param {String} cacheId The cacheId.\n* @param {Array} patches The patches.\n* @returns {Object} Returns the patched value.\n*/\nconst patchValue = (session, handle, cacheId, patches) => {\n  const cache = getHandleCache(session, handle);\n  let entry = cache.get(cacheId);\n  if (typeof entry === 'undefined') {\n    entry = Array.isArray(patches[0].value) ? [] : {};\n  }\n  if (patches.length) {\n    if (patches[0].path === '/' && typeof patches[0].value !== 'object') {\n      // 'plain' values on root path is not supported (no object reference),\n      // so we simply store the value directly:\n      entry = patches[0].value;\n    } else {\n      JSONPatch.apply(entry, patches);\n    }\n    cache.set(cacheId, entry);\n  }\n  return entry;\n};\n\n/**\n* Process delta interceptor.\n* @private\n* @param {Session} session The session the intercept is being executed on.\n* @param {Object} request The JSON-RPC request.\n* @param {Object} response The response.\n* @returns {Object} Returns the patched response\n*/\nexport default function deltaInterceptor(session, request, response) {\n  const { delta, result } = response;\n  if (delta) {\n    // when delta is on the response data is expected to be an array of patches:\n    Object.keys(result).forEach((key) => {\n      if (!Array.isArray(result[key])) {\n        throw new Error('Unexpected RPC response, expected array of patches');\n      }\n      result[key] = patchValue(session, request.handle, `${request.method}-${key}`, result[key]);\n    });\n    // return a cloned response object to avoid patched object references:\n    return JSON.parse(JSON.stringify(response));\n  }\n  return response;\n}\n\n// export object reference for testing purposes:\ndeltaInterceptor.sessions = sessions;\n","const RETURN_KEY = 'qReturn';\n\n/**\n* Picks out the result \"out\" parameter based on the QIX method+schema, with\n* some specific handling for some methods that breaks the predictable protocol.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the result property on the response\n*/\nexport default function outParamInterceptor(session, request, response) {\n  if (request.method === 'CreateSessionApp' || request.method === 'CreateSessionAppFromApp') {\n    // this method returns multiple out params that we need\n    // to normalize before processing the response further:\n    response[RETURN_KEY].qGenericId = response[RETURN_KEY].qGenericId || response.qSessionAppId;\n  } else if (request.method === 'GetInteract') {\n    // this method returns a qReturn value when it should only return\n    // meta.outKey:\n    delete response[RETURN_KEY];\n  }\n\n  if (hasOwnProperty.call(response, RETURN_KEY)) {\n    return response[RETURN_KEY];\n  }\n  if (request.outKey !== -1) {\n    return response[request.outKey];\n  }\n\n  return response;\n}\n","import deltaRequest from './interceptors/request/delta';\nimport apiResponse from './interceptors/response/api';\nimport deltaResponse from './interceptors/response/delta';\nimport errorResponse from './interceptors/response/error';\nimport outParamResponse from './interceptors/response/out-param';\nimport resultResponse from './interceptors/response/result';\n\n/**\n * Interceptors is a concept similar to mixins, but run on a lower level. The interceptor concept\n * can augment either the requests (i.e. before sent to QIX Engine), or the responses (i.e. after\n * QIX Engine has sent a response). The interceptor promises runs in parallel to the regular\n * promises used in enigma.js, which means that it can be really useful when you want to normalize\n * behaviors in your application.\n * @interface Interceptor\n */\n\n/**\n  * @class InterceptorRequest\n  * @implements {Interceptor}\n  */\n\n/**\n * @class InterceptorResponse\n * @implements {Interceptor}\n */\n\n/**\n * This method is invoked when a request is about to be sent to QIX Engine.\n * @function InterceptorRequest#onFulfilled\n * @param {Session} session The session executing the interceptor.\n * @param {Object} request The JSON-RPC request that will be sent.\n */\n\n/**\n * This method is invoked when a previous interceptor has rejected the\n * promise, use this to handle for example errors before they are sent into mixins.\n * @function InterceptorResponse#onRejected\n * @param {Session} session The session executing the interceptor. You may use .retry() to retry\n * sending it to QIX Engine.\n * @param {Object} request The JSON-RPC request resulting in this error.\n * @param {Object} error Whatever the previous interceptor is rejected with.\n */\n\n/**\n * This method is invoked when a promise has been successfully resolved,\n * use this to modify the result or reject the promise chain before it is sent\n * to mixins.\n * @function InterceptorResponse#onFulfilled\n * @param {Session} session The session executing the interceptor.\n * @param {Object} request The JSON-RPC request resulting in this response.\n * @param {Object} result Whatever the previous interceptor is resolved with.\n */\nclass Intercept {\n  /**\n  * Create a new Intercept instance.\n  * @private\n  * @param {Object} options The configuration options for this class.\n  * @param {Promise<Object>} options.Promise The promise constructor to use.\n  * @param {ApiCache} options.apis The ApiCache instance to use.\n  * @param {Array<Object>} [options.request] The additional request interceptors to use.\n  * @param {Array<Object>} [options.response] The additional response interceptors to use.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    this.request = [{ onFulfilled: deltaRequest }, ...this.request || []];\n    this.response = [\n      { onFulfilled: errorResponse },\n      { onFulfilled: deltaResponse },\n      { onFulfilled: resultResponse },\n      { onFulfilled: outParamResponse },\n      ...this.response || [],\n      { onFulfilled: apiResponse },\n    ];\n  }\n\n  /**\n  * Execute the request interceptor queue, each interceptor will get the result from\n  * the previous interceptor.\n  * @private\n  * @param {Session} session The session instance to execute against.\n  * @param {Promise<Object>} promise The promise to chain on to.\n  * @returns {Promise<Object>}\n  */\n  executeRequests(session, promise) {\n    return this.request.reduce((interception, interceptor) => {\n      const intercept = interceptor.onFulfilled\n      && interceptor.onFulfilled.bind(this, session);\n      return interception.then(intercept);\n    }, promise);\n  }\n\n  /**\n  * Execute the response interceptor queue, each interceptor will get the result from\n  * the previous interceptor.\n  * @private\n  * @param {Session} session The session instance to execute against.\n  * @param {Promise<Object>} promise The promise to chain on to.\n  * @param {Object} request The JSONRPC request object for the intercepted response.\n  * @returns {Promise<Object>}\n  */\n  executeResponses(session, promise, request) {\n    return this.response.reduce((interception, interceptor) => interception.then(\n      interceptor.onFulfilled && interceptor.onFulfilled.bind(this, session, request),\n      interceptor.onRejected && interceptor.onRejected.bind(this, session, request),\n    ),\n    promise);\n  }\n}\n\nexport default Intercept;\n","/**\n* Process error interceptor.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the defined error for an error, else the response.\n*/\nexport default function errorInterceptor(session, request, response) {\n  if (typeof response.error !== 'undefined') {\n    const data = response.error;\n    const error = new Error(data.message);\n    error.code = data.code;\n    error.parameter = data.parameter;\n    return session.config.Promise.reject(error);\n  }\n  return response;\n}\n","/**\n* Process result interceptor.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the result property on the response\n*/\nexport default function resultInterceptor(session, request, response) {\n  return response.result;\n}\n","import KeyValueCache from './cache';\n\n/**\n* API cache for instances of QIX types, e.g. GenericObject.\n* @private\n* @extends KeyValueCache\n*/\nclass ApiCache extends KeyValueCache {\n  /**\n  * Adds an API.\n  * @private\n  * @function ApiCache#add\n  * @param {Number} handle - The handle for the API.\n  * @param {*} api - The API.\n  * @returns {{api: *}} The entry.\n  */\n  add(handle, api) {\n    const entry = { api };\n    super.add(handle.toString(), entry);\n    api.on('closed', () => this.remove(handle));\n    return entry;\n  }\n\n  /**\n  * Gets an API.\n  * @private\n  * @function ApiCache#getApi\n  * @param {Number} handle - The handle for the API.\n  * @returns {*} The API for the handle.\n  */\n  getApi(handle) {\n    const entry = typeof handle !== 'undefined' ? this.get(handle.toString()) : undefined;\n    return entry && entry.api;\n  }\n\n  /**\n  * Gets a list of APIs.\n  * @private\n  * @function ApiCache#getApis\n  * @returns {Array} The list of entries including `handle` and `api` properties for each entry.\n  */\n  getApis() {\n    return super.getAll().map(entry => ({\n      handle: entry.key,\n      api: entry.value.api,\n    }));\n  }\n\n  /**\n  * Gets a list of APIs with a given type.\n  * @private\n  * @function ApiCache#getApisByType\n  * @param {String} type - The type of APIs to get.\n  * @returns {Array} The list of entries including `handle` and `api` properties for each entry.\n  */\n  getApisByType(type) {\n    return this.getApis().filter(entry => entry.api.type === type);\n  }\n}\n\nexport default ApiCache;\n","import Session from './session';\nimport Schema from './schema';\nimport RPC from './rpc';\nimport SuspendResume from './suspend-resume';\nimport Intercept from './intercept';\nimport ApiCache from './api-cache';\n\n/**\n * The enigma.js configuration object.\n * @interface Configuration\n * @property {Object} schema Object containing the specification for the API to generate.\n * Corresponds to a specific version of the QIX Engine API.\n * @property {String} url String containing a proper websocker URL to QIX Engine.\n * @property {Function} [createSocket] A function to use when instantiating the WebSocket,\n * mandatory for Node.js.\n * @property {Object} [Promise] ES6-compatible Promise library.\n * @property {Boolean} [suspendOnClose=false] Set to true if the session should be suspended\n * instead of closed when the websocket is closed.\n * @property {Array<Mixin>} [mixins=[]] Mixins to extend/augment the QIX Engine API. Mixins\n * are applied in the array order.\n * @property {Array} [requestInterceptors=[]] Interceptors for augmenting requests before they\n * are sent to QIX Engine. Interceptors are applied in the array order.\n * @property {Array} [responseInterceptors=[]] Interceptors for augmenting responses before they\n * are passed into mixins and end-users. Interceptors are applied in the array order.\n * @property {Object} [protocol={}] An object containing additional JSON-RPC request parameters.\n * @property {Boolean} [protocol.delta=true] Set to false to disable the use of the\n * bandwidth-reducing delta protocol.\n */\n\n/**\n * Mixin object to extend/augment the QIX Engine API\n * @interface Mixin\n * @property {String|Array<String>} types String or array of strings containing the API-types that\n * will be mixed in.\n * @property {Object} [extend] Object literal containing the methods that will be extended on the\n * specified API.\n * @property {Object} [override] Object literal containing the methods to override existing methods.\n * @property {Function} [init] Init function that, if defined, will run when an API is instantiated.\n * It runs with Promise and API object as parameters\n */\n\n/**\n * The API for generated APIs depends on the QIX Engine schema you pass into your Configuration,\n * and on what QIX struct the API has.\n * @interface API\n * @property {String} id Contains the unique identifier for this API.\n * @property {String} type Contains the schema class name for this API.\n * @property {String} genericType Corresponds to the qInfo.qType property on the generic object's\n * properties object.\n * @property {Session} session Contains a reference to the session that this API belongs to.\n * @property {Number} handle Contains the handle QIX Engine assigned to the API. Used interally in\n * enigma.js for caches and JSON-RPC requests.\n */\n\n/**\n * Handle changes on the API. The changed event is triggered whenever enigma.js or QIX Engine has\n * identified potential changes on the underlying properties or hypercubes and you should re-fetch\n * your data.\n * @event API#changed\n * @type {Object}\n */\n\n/**\n * Handle closed API. The closed event is triggered whenever QIX Engine considers an API closed.\n * It usually means that it no longer exist in the QIX Engine document or session.\n * @event API#closed\n * @type {Object}\n */\n\n/**\n * Handle JSON-RPC requests/responses for this API. Generally used in debugging purposes.\n * traffic:* will handle all websocket messages, traffic:sent will handle outgoing messages\n * and traffic:received will handle incoming messages.\n * @event API#traffic\n * @type {Object}\n */\n\n/**\n* Qix service.\n*/\nclass Qix {\n  /**\n  * Function used to get a session.\n  * @private\n  * @param {Configuration} config The configuration object for this session.\n  * @returns {Session} Returns a session instance.\n  */\n  static getSession(config) {\n    const {\n      createSocket,\n      Promise,\n      requestInterceptors,\n      responseInterceptors,\n      url,\n    } = config;\n    const apis = new ApiCache();\n    const intercept = new Intercept({\n      apis,\n      Promise,\n      request: requestInterceptors,\n      response: responseInterceptors,\n    });\n    const rpc = new RPC({ createSocket, Promise, url });\n    const suspendResume = new SuspendResume({ apis, Promise, rpc });\n    const session = new Session({\n      apis,\n      config,\n      intercept,\n      rpc,\n      suspendResume,\n    });\n    return session;\n  }\n\n  /**\n  * Function used to create a QIX session.\n  * @param {Configuration} config The configuration object for the QIX session.\n  * @returns {Session} Returns a new QIX session.\n  */\n  static create(config) {\n    Qix.configureDefaults(config);\n    config.mixins.forEach((mixin) => {\n      config.definition.registerMixin(mixin);\n    });\n    return Qix.getSession(config);\n  }\n\n  /**\n  * Function used to configure defaults.\n  * @private\n  * @param {Configuration} config The configuration object for how to connect\n  *                               and retrieve end QIX APIs.\n  */\n  static configureDefaults(config) {\n    if (!config) {\n      throw new Error('You need to supply a configuration.');\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (!config.Promise && typeof Promise === 'undefined') {\n      throw new Error('Your environment has no Promise implementation. You must provide a Promise implementation in the config.');\n    }\n\n    if (typeof config.createSocket !== 'function' && typeof WebSocket === 'function') {\n      // eslint-disable-next-line no-undef\n      config.createSocket = url => new WebSocket(url);\n    }\n\n    if (typeof config.suspendOnClose === 'undefined') {\n      config.suspendOnClose = false;\n    }\n\n    config.protocol = config.protocol || {};\n    config.protocol.delta = typeof config.protocol.delta !== 'undefined' ? config.protocol.delta : true;\n    // eslint-disable-next-line no-restricted-globals\n    config.Promise = config.Promise || Promise;\n    config.mixins = config.mixins || [];\n    config.definition = config.definition || new Schema(config);\n  }\n}\n\nexport default Qix;\n"],"names":["util","EventEmitter","init","call","this","isObject","arg","isNumber","isUndefined","isFunction","prototype","_events","undefined","_maxListeners","defaultMaxListeners","setMaxListeners","n","isNaN","TypeError","emit","type","er","handler","len","args","i","listeners","error","arguments","Error","length","Array","apply","slice","on","addListener","listener","m","newListener","push","warned","console","trace","once","fired","g","removeListener","list","position","splice","removeAllListeners","key","isArray","listenerCount","emitter","obj","Object","keys","forEach","cacheId","Session","options","session","assign","Promise","config","definition","id","rpc","onRpcError","bind","onRpcClosed","onRpcMessage","onRpcNotification","onRpcTraffic","onSessionClosed","err","suspendResume","isSuspended","evt","code","suspendOnClose","suspend","then","_this","initiator","response","change","handle","_this2","emitHandleChanged","close","emitHandleClosed","method","params","dir","data","api","apis","getApi","getApis","entry","clear","genericType","generate","factory","add","globalPromise","open","_this3","getObjectApi","global","request","reject","createRequestId","promise","intercept","executeRequests","resolve","augmentedRequest","_this4","protocol","outKey","send","retry","executeResponses","addToPromiseChain","_this5","onlyIfAttached","resume","value","_this6","_this7","name","chain","KeyValueCache","entries","map","filter","hasOwnProperty","toCamelCase","symbol","substring","toLowerCase","Schema","schema","mixins","types","extend","override","cached","typeKey","entryList","get","structs","generateApi","create","generateDefaultApi","mixinType","mixinNamedParamFacade","customKey","instance","Events","defineProperties","enumerable","writable","mixinList","concat","mixin","out","Out","Name","fnName","baseFn","base","defaults","In","reduce","result","item","DefaultValue","_typeof","every","RPCResolver","RPC","resolvers","requestId","openedPromise","socket","createSocket","url","onopen","onOpen","onclose","onClose","onerror","onError","onmessage","onMessage","registerResolver","closedPromise","opened","resolveWith","event","closed","rejectAllOutstandingResolvers","message","reason","rejectWith","JSON","parse","resolver","resolvedId","unregisterResolver","rejectedId","readyState","OPEN","jsonrpc","stringify","SuspendResume","openDocParams","reopen","sessionState","changed","getApisByType","pop","doc","qReturn","qHandle","tasks","buildGetMethodName","all","restoreRpcConnection","restoreGlobal","restoreDoc","restoreDocObjects","catch","timeout","timer","notificationResolve","notificationReceived","notificationPromise","onNotification","clearTimeout","qSessionState","setTimeout","state","replace","SUCCESS_KEY","apiInterceptor","qType","qGenericId","qGenericType","hasOwn","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","configurable","newValue","getProperty","src","copy","copyIsArray","clone","deep","JSONPatch","v","isUndef","isSpecialProperty","getParent","str","numPart","parts","split","part","newPart","compare","a","b","isIdentical","l","original","newData","basePath","patches","val","oldVal","tmpPath","op","path","newA","oldA","tmpIdx","findIndex","idx","qInfo","qId","ii","ll","from","patchArray","patch","parent","newValues","oldParent","createPatch","updateObject","sessions","getHandleCache","cache","bindSession","patchValue","set","deltaInterceptor","delta","RETURN_KEY","Intercept","onFulfilled","parameter","deltaResponse","qSessionAppId","apiResponse","interception","interceptor","onRejected","ApiCache","remove","_get","requestInterceptors","responseInterceptors","Qix","configureDefaults","registerMixin","getSession","WebSocket"],"mappings":"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"}