const enigma = require('enigma.js')
const schema = require('enigma.js/schemas/3.1.json')
const WebSocket = require('ws')
const fs = require('fs')
const path = require('path')
const serializeapp = require('./lib/serializeapp')

module.exports = async function serialize(config) {
  console.log('Start of serialization process')

  // Get the target directory for serialized data
  const targetJSON = path.resolve(config.targetJSON)
  // Get the source doc based on whether the config file is for QS Desktop or Enterprise
  const doc =
    config.env_type === 'desktop'
      ? config.sourceQVF + '.qvf'
      : config.sourceQVFID

  console.log('Target directory is ' + targetJSON)
  // Create the target directory if it does not exist
  if (!fs.existsSync(targetJSON)) {
    console.log('Creating target directory')
    fs.mkdirSync(targetJSON)
  }

  // Configure the Enigma session
  console.log('Configuring Enigma session')
  // Use a non-secure websocket for desktop
  const session = enigma.create({
    schema,
    url:
      config.env_type === 'desktop'
        ? 'ws://' +
          config.desktopHost +
          ':' +
          config.desktopPort +
          '/app/engineData'
        : 'wss://' +
          config.serverHost +
          ':' +
          config.serverPort +
          '/app/engineData',
    // Get certificates from /cert directory
    createSocket: url =>
      new WebSocket(url, {
        ca: [fs.readFileSync('./cert/root.pem')],
        key: fs.readFileSync('./cert/client_key.pem'),
        cert: fs.readFileSync('./cert/client.pem'),
        // Temp workaround for non-secure connection errors
        checkServerIdentity: function(host, cert) {
          return undefined
        },
        // Set the X-Qlik-User header based on the config file
        headers: {
          'X-Qlik-User':
            'UserDirectory=' + config.userDirectory + ';UserId=' + config.userId
        }
      })
  })

  try {
    // Open the session and QVF
    console.log('Opening Enigma session')
    const global = await session.open()
    console.log('Opening document ' + doc)
    var app = await global.openDoc(doc)

    // Serialize the app
    console.log('Serializing app')
    var result = await serializeapp(app)
    console.log('App serialized successfully')

    // Override qTitle as per config
    result['properties'].qTitle = config.sourceQVF
    const components = Object.keys(result)

    // Store each component as JSON
    // Load script is stored as a .qvs
    components.map(component => {
      if (config.components[component]) {
        console.log('Storing ' + component)
        fs.writeFileSync(
          path.join(
            `${targetJSON}`,
            component === 'loadScript'
              ? `${component}.qvs`
              : `${component}.json`
          ),
          component === 'loadScript'
            ? result[component]
            : JSON.stringify(result[component], null, 2)
        )
      }
    })
    console.log('End of serialization process - exiting with success')
    process.exit(0)
  } catch (e) {
    console.log('!!! ERROR !!! ' + e)
    console.log('End of serialization process - exiting with failure')
    process.exit(1)
  }
}
