async function buildapp(global, data) {
  if (typeof data === 'undefined')
    throw new Error('Expects qsocks global and json data')
  if (typeof data === 'string') data = JSON.parse(data)

  var filename = data.properties.qTitle
  var appId = undefined

  var context = {
    global: global
  }

  // Create a new empty app and open it
  var response = await global.createApp(filename)
  appId = response.qAppId
  console.log('Created app ' + appId)
  var app = await global.openDoc(appId)
  console.log('Opened app ' + appId)
  context.app = app

  // Set the app properties and load script
  await context.app.setAppProperties(data.properties)
  console.log('Set properties')
  await context.app.setScript(data.loadScript)
  console.log('Set load script')

  if (data.appprops) {
    await Promise.all(
      data.appprops.map(function(d) {
        return context.app.createObject(d.qProperty).then(function(handle) {
          return handle.setFullPropertyTree(d)
        })
      })
    )
  }

  console.log('Set appprops')

  // Create dimensions, measures and master objects
  await Promise.all(
    data.dimensions.map(function(d) {
      return context.app.createDimension(d)
    })
  )
  console.log('Created dimensions')
  await Promise.all(
    data.measures.map(function(d) {
      return context.app.createMeasure(d)
    })
  )
  console.log('Created measures')
  await Promise.all(
    data.masterobjects.map(function(d) {
      return context.app.createObject(d.qProperty).then(function(obj) {
        return obj.setProperties(d.qProperty)
      })
    })
  )
  console.log('Created master objects')

  // Create sheets
  await Promise.all(
    data.sheets.map(function(d) {
      return context.app.createObject(d.qProperty).then(function(handle) {
        return handle.setFullPropertyTree(d)
      })
    })
  )
  console.log('Created sheets')

  // Create data connections
  // These are created from the config file
  await Promise.all(
    data.dataconnections.map(function(d) {
      return context.app.createConnection(d)
    })
  ).catch(e => {
    console.log('Connection already exists')
    console.log(e)
  })
  console.log('Created data connections')

  // Create variables
  await Promise.all(
    data.variables.map(function(v) {
      return context.app.createVariableEx(v)
    })
  )
  console.log('Created variables')

  // Reload and save
  if (data.reload) {
    await context.app.doReload()
    console.log('App reloaded')
    await context.app.doSave()
    console.log('App saved')
  }

  // Return the new app ID
  return appId
}
module.exports = buildapp
