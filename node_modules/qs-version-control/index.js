/**
 * @author Sashin Patel <sashin.patel@accenture.com>
 * @author Michael Rutter <michael.rutter@accenture.com>
 * @copyright Accenture PLC 2018
 */

const fs = require('fs')
const path = require('path')
const yargs = require('yargs')
const serialize = require('./serialize')
const build = require('./build')

const argv = yargs
  .demandCommand(1, 'Must provide a valid command')
  .command('to-json', 'serialise from qvf to JSON')
  .command('to-qvf', 'deserialise from JSON to qvf')
  .options({
    'config-path': {
      alias: 'c',
      demandOption: true
    }
  })
  .help('help').argv

// Path to JSON config file
const configPath = path.normalize(argv.configPath)

let configFile
// Checking if config file exists at path
if (fs.existsSync(configPath)) {
  try {
    // Attempting to parse config file
    configFile = JSON.parse(
      fs.readFileSync(path.join(process.cwd(), configPath), 'utf-8')
    )
  } catch (e) {
    console.log('Config file is not valid JSON')
    console.log('!!! ERROR !!! ' + e)
    console.log('Config file is not valid JSON - exiting with failure')
    process.exit(1)
  }
} else {
  console.log(
    'Config file does not exist at path: ',
    configPath,
    ' - exiting with failure'
  )
  process.exit(1)
}

const subcommand = argv._[0]

if (subcommand === 'to-json') {
  serialize(configFile)
} else if (subcommand === 'to-qvf') {
  build(configFile)
} else {
  console.log(
    'This should not have been able to happnen - exiting with failure'
  )
  process.exit(1)
}
